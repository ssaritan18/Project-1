          renderItem={({ item }) => {
            // Normalize message properties to prevent undefined access
            const normalizedMessage = {
              id: item.id ?? item._id ?? Math.random().toString(36).slice(2),
              text: item.text ?? item.content ?? "",
              author: item.author ?? "Unknown",
              author_id: item.author_id ?? item.sender ?? "unknown",
              author_name: item.author_name ?? item.author ?? "Unknown User",
              type: item.type ?? "text",
              ts: item.ts ?? Date.now(),
              reactions: item.reactions ?? { like: 0, heart: 0, clap: 0, star: 0 }
            };
            
            console.log("ðŸŽ¨ Rendering message:", {
              id: normalizedMessage.id,
              author: normalizedMessage.author,
              text: normalizedMessage.text?.slice(0, 50) + "..."
            });
            
            return (
              <View style={{ marginBottom: 10 }}>
                <View style={[styles.bubble, normalizedMessage.author === 'me' ? styles.mine : styles.theirs]}>
                  <Text style={styles.authorText}>{normalizedMessage.author_name || normalizedMessage.author}</Text>
                  {normalizedMessage.type === 'text' ? (
                    <Text style={styles.bubbleText}>{normalizedMessage.text}</Text>
                  ) : (
                    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                      <Ionicons name="mic" size={16} color="#000" />
                      <Text style={{ color: '#000', fontWeight: '700' }}>Voice message ({item.durationSec || 3}s)</Text>
                    </View>
                  )}
                  <Text style={styles.timeText}>
                    {new Date(normalizedMessage.ts).toLocaleTimeString()}
                  </Text>
                </View>
                <ReactBar msgId={normalizedMessage.id} counts={normalizedMessage.reactions} />
              </View>
            );
          }}
